import Attendance from "../core/models/Attendance";
import AuthCredentials from "../core/models/AuthCredentials";
import Commission from "../core/models/Commission";
import Doctor from "../core/models/Doctor";
import Service from "../core/models/Service";
import User from "../core/models/User";
import UserAttendance from "../core/models/UserAttendance";
declare class Facade {
    private attendancesDAO;
    private authDAO;
    private commissionsDAO;
    private doctorAuthDAO;
    private doctorDAO;
    private servicesDAO;
    private userAttendancesDAO;
    private userDAO;
    constructor();
    indexAttendances(): Promise<Attendance[]>;
    addAttendance(data: Attendance): Promise<Attendance>;
    updateAttendance(data: Attendance): Promise<Attendance>;
    deleteAttendance(id: number): Promise<boolean>;
    login(credentials: AuthCredentials): Promise<User>;
    doctorLogin(credentials: AuthCredentials): Promise<Doctor>;
    register(data: User): Promise<boolean>;
    doctorRegister(data: Doctor): Promise<boolean>;
    indexCommissions(doctorId: number): Promise<Commission[]>;
    addCommission(data: Commission): Promise<Commission>;
    showDoctor(id: number): Promise<Doctor>;
    updateDoctor(data: Doctor): Promise<Doctor>;
    indexServices(attendanceID: number): Promise<Service[]>;
    addService(data: Service): Promise<Service>;
    updateService(data: Service): Promise<Service>;
    deleteService(id: number): Promise<boolean>;
    indexUserAttendances(attendanceID: number): Promise<UserAttendance[]>;
    addUserAttendance(data: UserAttendance, services: number[]): Promise<UserAttendance>;
    updateUserAttendance(data: UserAttendance, services: any): Promise<UserAttendance>;
    deleteUserAttendance(id: number): Promise<boolean>;
    showUser(id: number): Promise<User>;
    updateUser(data: User): Promise<User>;
}
declare let FacadeInstance: () => Facade;
export default FacadeInstance;
